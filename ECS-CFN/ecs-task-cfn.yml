AWSTemplateFormatVersion: '2010-09-09'

Description: Creates ECS cluster, task, IAM roles, ALB. Imports Repo name.

Parameters:
  VpcId:
    Description: Choose which VPC this ECS cluster should be deployed to
    Type: AWS::EC2::VPC::Id

  CodeArtifactRegion:
    Description: Code Artifact Repository Region
    Default: us-west-2
    Type: String

  CodeArtifactAccountID:
    Description: Code Artifact Account ID
    Type: String
  
  CodeArtifactDomain:
    Description: Code Artifact Domain
    Type: String

  CodeArtifactRepository:
    Description: Code Artifact Repository
    Type: String
  
  # If you want to incorporate creation of SecureString from CFN, refer to https://rnanthan.medium.com/creating-secure-string-in-aws-system-manager-parameter-store-via-aws-cloudformation-f3ab62d9d4c3
  # Assumption is that this parameter uses a default KMS key, otherwise update Task Execution policy
  ProxyAuthCredentialsSSMParameter:
    Description: HTTP Auth Credentials - SSM Parameter Store ARN for Secret String
    Type: String

  ECRRepo:
    Description: ECR Repo name created by the previous template
    Type: String

  AppName:
    Description: Application Name - used in ECS Task Container Definition
    Default: myECSApp
    Type: String
  
  KMSKeyARN:
    Description: KMS Key ARN used to encrypt Proxy auth password
    Type: String


Resources:

# Creating parameters in Parameter Store to then be used as container ENV variables

  CodeArtifactRegionSSMParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/codeartifactproxy/codeartifactregion'
      Type: String
      Value: !Ref CodeArtifactRegion

  CodeArtifactAccountIDSSMParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/codeartifactproxy/codeartifactaccountID'
      Type: String
      Value: !Ref CodeArtifactAccountID

  CodeArtifactDomainSSMParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/codeartifactproxy/codeartifactdomain'
      Type: String
      Value: !Ref CodeArtifactDomain

  CodeArtifactRepositorySSMParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: '/codeartifactproxy/codeartifactrepository'
      Type: String
      Value: !Ref CodeArtifactRepository

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: CodeArtifactProxyCluster
  
  ECSSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: 10.0.3.0/24
      
  ECSSubnet2:  
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: 10.0.4.0/24

  ECSSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
          IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000

  ECSService: 
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDef
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref ECSSubnet1
            - !Ref ECSSubnet2
      LoadBalancers:
        - ContainerName: !Ref AppName
          ContainerPort: 5000
          TargetGroupArn: !Ref ALBTargetGroup

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: CodeArtifactProxyECSTaskPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
            - Effect: Allow
              Action:
                - codeartifact:GetAuthorizationToken
              Resource:
                - !Sub "arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:domain/${CodeArtifactDomain}"
            - Effect: Allow
              Action:
                - sts:GetServiceBearerToken
              Resource: "*"
              Condition: 
                StringEquals:
                  sts:AWSServiceName: "codeartifact.amazonaws.com"
            - Effect: Allow
              Action:
                - codeartifact:Describe*
                - codeartifact:Get*
                - codeartifact:List*
                - codeartifact:ReadFromRepository
              Resource:
                - !Sub "arn:aws:codeartifact:*:*:repository/*/${CodeArtifactRepository}"
                - !Sub "arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:package/${CodeArtifactDomain}/*"
                - !Sub "arn:aws:codeartifact:${AWS::Region}:${AWS::AccountId}:domain/${CodeArtifactDomain}"
                
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole        

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: CodeArtifactProxyECSTaskExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - ssm:GetParameters
                - kms:Decrypt
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/codeartifactproxy/*"
                - !Ref KMSKeyARN
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      
  ECSTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: !Ref AppName
        Image: !Ref ECRRepo
        Essential: true
        PortMappings: 
        - ContainerPort: 5000
          Protocol: tcp
        Secrets:
          - Name: "PROXY_AUTH"
            ValueFrom: !Ref ProxyAuthCredentialsSSMParameter
          - Name: "CODE_ARTIFACT_REGION"
            ValueFrom: !Ref CodeArtifactRegionSSMParameter
          - Name: "CODE_ARTIFACT_DOMAIN"
            ValueFrom: !Ref CodeArtifactDomainSSMParameter
          - Name: "CODE_ARTIFACT_REPOSITORY"
            ValueFrom: !Ref CodeArtifactRepositorySSMParameter
          - Name: "CODE_ARTIFACT_ACCOUNT_ID"
            ValueFrom: !Ref CodeArtifactAccountIDSSMParameter
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSServiceRole
      Family: CodeArtifactProxyApp
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 512

      RequiresCompatibilities:
        - FARGATE

  ALBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: 10.0.1.0/24
      
  ALBSubnet2:  
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: 10.0.2.0/24

  ALBSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  ALB: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Type: application 
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref ALBSubnet1
        - !Ref ALBSubnet2


  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /healthcheck
  
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref ALBListener
      Priority: 1

